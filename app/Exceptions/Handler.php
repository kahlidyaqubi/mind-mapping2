<?php

namespace App\Exceptions;

use Illuminate\Auth\AuthenticationException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Support\Arr;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    public function render($request, Throwable $exception)
    {
        // TODO: Change the autogenerated stub

        if ($exception instanceof NotFoundHttpException) {
            if ($request->segment(1) == 'api' || $request->ajax())
                return response()->json(['status' => false, 'statusCode' => 422, 'message' => 'no route', 'items' => empObj()]);
            else
                return redirect("/no-access");

        }
        if ($exception instanceof \Illuminate\Validation\ValidationException) {
            if ($request->segment(1) == 'api' || $request->ajax()) {
                $arr = array();
                $errors_data = [];
                $messages = $exception->errors();
                $mainMessage = null;
                foreach ($messages as $key => $row) {
                    $errors_data['fieldname'] = $key;
                    $errors_data['message'] = $row[0];
                    $arr[] = $errors_data;

                    if (!isset($mainMessage))
                        $mainMessage = $row[0];
                }
                return response()->json(['status' => false, 'statusCode' => 422, 'message' => $mainMessage, 'items' => $arr]);
            }

            return redirect()->back()->withErrors($exception->errors());
        }

        return parent::render($request, $exception);
    }

    protected function unauthenticated($request, AuthenticationException $exception)
    {

        if ($request->expectsJson() || $request->segment(1) == 'api') {
            return response_api(false, 401, null, empObj());
        }

        $guard = Arr::get($exception->guards(), 0);

        switch ($guard) {
            case 'admin':
                $login = $guard . '/login';
                break;
            default:
                $login = 'login';
                break;
        }
        return redirect()->guest($login);
    }

}
